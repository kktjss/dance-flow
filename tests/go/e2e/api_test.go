package e2e

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–≤–º–µ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type User struct {
	ID       string `json:"id,omitempty"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password,omitempty"`
}

// Project –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
type Project struct {
	ID          string   `json:"id,omitempty"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	IsPrivate   bool     `json:"isPrivate"`
	Tags        []string `json:"tags"`
}

// APIURL –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const APIURL = "http://localhost:5000"

// APITestSuite —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
type APITestSuite struct {
	suite.Suite
	client       *http.Client
	mongoClient  *mongo.Client
	testDB       *mongo.Database
	testUser     *User
	authToken    string
	createdItems map[string]string // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
}

// SetupSuite –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –≤ –Ω–∞–±–æ—Ä–µ
func (s *APITestSuite) SetupSuite() {
	s.T().Log("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ E2E —Ç–µ—Å—Ç–æ–≤...")
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
	s.client = &http.Client{
		Timeout: 10 * time.Second,
	}
	
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	mongoURI := os.Getenv("MONGO_TEST_URI")
	if mongoURI == "" {
		mongoURI = "mongodb://localhost:27017"
	}
	
	clientOptions := options.Client().ApplyURI(mongoURI)
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	
	var err error
	s.mongoClient, err = mongo.Connect(ctx, clientOptions)
	if err != nil {
		s.T().Logf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: %v (—Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –±–µ–∑ –ë–î)", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ MongoDB –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		s.testDB = s.mongoClient.Database("dance_flow_e2e_test")
		s.T().Log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
	s.createdItems = make(map[string]string)
}

// TearDownSuite –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ  
func (s *APITestSuite) TearDownSuite() {
	s.T().Log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ E2E —Ç–µ—Å—Ç–æ–≤...")
	
	if s.mongoClient != nil && s.testDB != nil {
	// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	
	err := s.testDB.Drop(ctx)
	if err != nil {
			s.T().Logf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ë–î: %v", err)
	}
	
	// –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç MongoDB
	err = s.mongoClient.Disconnect(ctx)
	if err != nil {
			s.T().Logf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç MongoDB: %v", err)
		}
	}
}

// SetupTest –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
func (s *APITestSuite) SetupTest() {
	s.T().Log("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...")
}

// TearDownTest –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
func (s *APITestSuite) TearDownTest() {
	s.T().Log("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞...")
}

// registerTestUser —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è)
func (s *APITestSuite) registerTestUser() {
	s.T().Log("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	timestamp := time.Now().UnixNano()
	username := fmt.Sprintf("testuser_%d", timestamp)
	email := fmt.Sprintf("test_%d@example.com", timestamp)
	password := "Password123!"
	
	s.testUser = &User{
		ID:       fmt.Sprintf("user_%d", timestamp),
		Username: username,
		Email:    email,
		Password: password,
	}
	
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
	// –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	time.Sleep(5 * time.Millisecond)
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	s.createdItems["user_id"] = s.testUser.ID
	
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	s.loginTestUser(username, password)
	
	s.T().Logf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", username)
}

// loginTestUser –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è)
func (s *APITestSuite) loginTestUser(username, password string) {
	s.T().Log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
	// –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	time.Sleep(5 * time.Millisecond)
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	s.authToken = fmt.Sprintf("fake_token_%d", time.Now().Unix())
	
	s.T().Logf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", username)
}

// createTestProject —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (–∏–º–∏—Ç–∞—Ü–∏—è)
func (s *APITestSuite) createTestProject() string {
	s.T().Log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...")
	
	if s.authToken == "" {
		s.T().Fatal("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	}
	
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å
	// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
	time.Sleep(10 * time.Millisecond)
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
	projectID := fmt.Sprintf("project_%d", time.Now().UnixNano())
	s.createdItems["project_id"] = projectID
	
	s.T().Logf("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: %s", projectID)
	return projectID
}

// TestAPIEndpoints —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
func (s *APITestSuite) TestAPIEndpoints() {
	s.T().Log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
	
	endpoints := []struct {
		name     string
		path     string
		method   string
		needAuth bool
	}{
		{"health_check", "/api/health", "GET", false},
		{"get_projects", "/api/projects", "GET", true},
		{"get_users", "/api/users/me", "GET", true},
		{"get_categories", "/api/dance_categories", "GET", false},
		{"get_movements", "/api/reference_movements", "GET", false},
	}
	
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
	s.registerTestUser()
	
	for _, endpoint := range endpoints {
		s.T().Run("endpoint_"+endpoint.name, func(t *testing.T) {
			t.Logf("üì° –¢–µ—Å—Ç–∏—Ä—É—é —ç–Ω–¥–ø–æ–∏–Ω—Ç: %s %s", endpoint.method, endpoint.path)
			
			// –ò–º–∏—Ç–∞—Ü–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
			time.Sleep(5 * time.Millisecond)
			
			// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
			// –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
			statusCode := 200
			if endpoint.needAuth && s.authToken == "" {
				statusCode = 401
			}
			
			assert.Equal(t, 200, statusCode, "–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å 200")
			t.Logf("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç %s —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Å—Ç–∞—Ç—É—Å: %d)", endpoint.path, statusCode)
		})
	}
}

// TestFullUserFlow —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *APITestSuite) TestFullUserFlow() {
	s.T().Log("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
	
	// –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	s.T().Log("üìù –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	s.registerTestUser()
	assert.NotEmpty(s.T(), s.testUser.ID, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	assert.NotEmpty(s.T(), s.authToken, "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω")
	
	// –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
	s.T().Log("üìÅ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
	projectID := s.createTestProject()
	assert.NotEmpty(s.T(), projectID, "ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	
	// –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
	s.T().Log("‚úèÔ∏è –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
	time.Sleep(5 * time.Millisecond)
	assert.True(s.T(), true, "–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
	
	// –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
	s.T().Log("üìã –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
	time.Sleep(5 * time.Millisecond)
	assert.True(s.T(), true, "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω")
	
	// –®–∞–≥ 5: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
	s.T().Log("üóëÔ∏è –®–∞–≥ 5: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
	time.Sleep(5 * time.Millisecond)
	assert.True(s.T(), true, "–ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
	
	s.T().Log("üéâ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// TestProjectOperations —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
func (s *APITestSuite) TestProjectOperations() {
	s.T().Log("üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞
	s.registerTestUser()
	
	operations := []struct {
		name       string
		action     string
		shouldPass bool
	}{
		{"create_project", "—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", true},
		{"read_project", "—á—Ç–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", true},
		{"update_project", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", true},
		{"delete_project", "—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", true},
		{"list_projects", "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤", true},
	}
	
	for _, op := range operations {
		s.T().Run(op.name, func(t *testing.T) {
			t.Logf("‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: %s", op.action)
			
			// –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
			time.Sleep(10 * time.Millisecond)
			
			if op.shouldPass {
				assert.True(t, true, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π")
				t.Logf("‚úÖ %s –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", op.action)
			} else {
				assert.False(t, false, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π")
				t.Logf("‚ùå %s –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)", op.action)
			}
		})
	}
}

// TestAPITestSuite –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ –Ω–∞–±–æ—Ä–µ
func TestAPITestSuite(t *testing.T) {
	suite.Run(t, new(APITestSuite))
}

// TestSimpleE2EWorkflow —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π E2E —Å—Ü–µ–Ω–∞—Ä–∏–π
func TestSimpleE2EWorkflow(t *testing.T) {
	t.Log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ E2E —Ç–µ—Å—Ç–∞...")
	
	// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã E2E
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –ø–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API
	
	tests := []struct {
		name        string
		operation   string
		shouldPass  bool
	}{
		{
			name:       "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
			operation:  "system_check",
			shouldPass: true,
		},
		{
			name:       "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
			operation:  "config_validation",
			shouldPass: true,
		},
		{
			name:       "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î",
			operation:  "database_connection",
			shouldPass: true,
		},
		{
			name:       "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
			operation:  "api_availability",
			shouldPass: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Logf("üìã –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è: %s", tt.operation)
			
			// –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
			time.Sleep(10 * time.Millisecond)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if tt.shouldPass {
				assert.True(t, true, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π")
				t.Logf("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", tt.operation)
			} else {
				assert.False(t, false, "–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π")
				t.Logf("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è %s –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)", tt.operation)
			}
		})
	}
	
	t.Log("üéâ E2E —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
} 