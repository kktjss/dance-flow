#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Go —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run_tests.sh [—Ç–∏–ø_—Ç–µ—Å—Ç–æ–≤] [–æ–ø—Ü–∏–∏]

set -e

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Go —Ç–µ—Å—Ç–æ–≤
cd "$(dirname "$0")"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ go.mod —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "go.mod" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: go.mod –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests/go"
  exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
print_status() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–¢–ò–ü_–¢–ï–°–¢–û–í] [–û–ü–¶–ò–ò]"
    echo ""
    echo "–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:"
    echo "  unit         - –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã"
    echo "  integration  - –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  e2e          - –¢–æ–ª—å–∫–æ E2E —Ç–µ—Å—Ç—ã"
    echo "  performance  - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    echo "  separate     - –¢–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)"
    echo "  all          - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -v, --verbose     - –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    echo "  -c, --coverage    - –°–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
    echo "  -r, --race        - –î–µ—Ç–µ–∫—Ü–∏—è –≥–æ–Ω–æ–∫ (race conditions)"
    echo "  -b, --bench       - –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"
    echo "  -s, --short       - –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ—Å—Ç—ã (–ø—Ä–æ–ø—É—Å–∫ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö)"
    echo "  --cleanup         - –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    echo "  -h, --help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo "  MONGO_TEST_URI           - URI –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π MongoDB"
    echo "  TEST_API_URL             - URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"
    echo "  RUN_PERFORMANCE_TESTS    - –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    echo "  TEST_TIMEOUT             - –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10m)"
}

# –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
TEST_TYPE="all"
VERBOSE=""
COVERAGE=""
RACE=""
BENCH=""
SHORT=""
CLEANUP=""
TIMEOUT="10m"

while [[ $# -gt 0 ]]; do
    case $1 in
        unit|integration|e2e|performance|separate|all)
            TEST_TYPE="$1"
            shift
            ;;
        -v|--verbose)
            VERBOSE="-v"
            shift
            ;;
        -c|--coverage)
            COVERAGE="-cover -coverprofile=coverage.out"
            shift
            ;;
        -r|--race)
            RACE="-race"
            shift
            ;;
        -b|--bench)
            BENCH="-bench=."
            shift
            ;;
        -s|--short)
            SHORT="-short"
            shift
            ;;
        --cleanup)
            CLEANUP="true"
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export TEST_ENV=${TEST_ENV:-"test"}
export MONGO_TEST_URI=${MONGO_TEST_URI:-"mongodb://localhost:27017"}
export TEST_API_URL=${TEST_API_URL:-"http://localhost:5000"}
export TEST_TIMEOUT=${TEST_TIMEOUT:-$TIMEOUT}

print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
print_info "  –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: $TEST_TYPE"
print_info "  MongoDB URI: $MONGO_TEST_URI"
print_info "  API URL: $TEST_API_URL"
print_info "  –¢–∞–π–º–∞—É—Ç: $TEST_TIMEOUT"

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
cleanup_test_data() {
    if [ "$CLEANUP" = "true" ]; then
        print_status "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        rm -rf tmp/* 2>/dev/null || true
        # –û—á–∏—â–∞–µ–º coverage —Ñ–∞–π–ª—ã
        rm -f coverage.out coverage.html 2>/dev/null || true
        print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
setup_test_environment() {
    print_status "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    mkdir -p tmp
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print_status "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    go mod tidy
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–µ—Å–ª–∏ —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ë–î)
    if [[ "$TEST_TYPE" == "integration" || "$TEST_TYPE" == "e2e" || "$TEST_TYPE" == "all" ]]; then
        print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB..."
        if ! timeout 5 bash -c "echo > /dev/tcp/localhost/27017" 2>/dev/null; then
            print_warning "MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É localhost:27017"
            print_warning "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ E2E —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã"
        else
            print_success "MongoDB –¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local test_path="$1"
    local test_name="$2"
    
    print_status "–ó–∞–ø—É—Å–∫ $test_name —Ç–µ—Å—Ç–æ–≤..."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    local cmd="go test"
    cmd="$cmd -timeout=$TEST_TIMEOUT"
    cmd="$cmd $VERBOSE"
    cmd="$cmd $COVERAGE"
    cmd="$cmd $RACE"
    cmd="$cmd $SHORT"
    cmd="$cmd $BENCH"
    cmd="$cmd $test_path"
    
    print_info "–ö–æ–º–∞–Ω–¥–∞: $cmd"
    
    if eval $cmd; then
        print_success "$test_name —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        return 0
    else
        print_error "$test_name —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
run_separate_tests() {
    print_status "–ó–∞–ø—É—Å–∫ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ç–∞–ª–æ–≥ separate (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
    if [ ! -d "separate" ]; then
        print_warning "–ö–∞—Ç–∞–ª–æ–≥ separate –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        return 0
    fi
    
    print_info "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥ separate..."
    cd separate
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ go.mod
    if [ ! -f "go.mod" ]; then
        print_error "go.mod –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ separate"
        cd ..
        return 1
    fi
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    print_info "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è..."
    go mod tidy
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    local cmd="go test"
    cmd="$cmd -timeout=$TEST_TIMEOUT"
    cmd="$cmd $VERBOSE"
    cmd="$cmd $RACE"
    cmd="$cmd $SHORT"
    cmd="$cmd $BENCH"
    cmd="$cmd ."  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ
    
    print_info "–ö–æ–º–∞–Ω–¥–∞: $cmd"
    
    local result=0
    if eval $cmd; then
        print_success "–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
    else
        print_error "–û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!"
        result=1
    fi
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥
    cd ..
    return $result
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
main() {
    local failed=0
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
    cleanup_test_data
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
    setup_test_environment
    
    print_status "–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    case $TEST_TYPE in
        "unit")
            run_tests "./unit/..." "Unit" || failed=1
            ;;
        "integration")
            export RUN_PERFORMANCE_TESTS=""  # –û—Ç–∫–ª—é—á–∞–µ–º performance —Ç–µ—Å—Ç—ã
            run_tests "./integration/..." "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ" || failed=1
            ;;
        "e2e")
            run_tests "./e2e/..." "E2E" || failed=1
            ;;
        "performance")
            export RUN_PERFORMANCE_TESTS="true"
            run_tests "./integration/..." "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" || failed=1
            ;;
        "separate")
            run_separate_tests || failed=1
            ;;
        "all")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            run_tests "./unit/..." "Unit" || failed=1
            
            export RUN_PERFORMANCE_TESTS=""
            run_tests "./integration/..." "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ" || failed=1
            
            run_tests "./e2e/..." "E2E" || failed=1
            
            run_separate_tests || failed=1
            
            # Performance —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
            if [ "$RUN_PERFORMANCE_TESTS" = "true" ]; then
                export RUN_PERFORMANCE_TESTS="true"
                run_tests "./integration/..." "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" || failed=1
            fi
            ;;
    esac
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º coverage, –µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–ª–∏
    if [ -n "$COVERAGE" ] && [ -f "coverage.out" ]; then
        print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è..."
        go tool cover -html=coverage.out -o coverage.html
        print_success "–û—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ coverage.html"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        local coverage_percent=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        print_info "–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞: $coverage_percent"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
    cleanup_test_data
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [ $failed -eq 0 ]; then
        print_success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!"
        exit 0
    else
        print_error "üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main 